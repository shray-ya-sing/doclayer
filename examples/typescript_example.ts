/**
 * DocLayer TypeScript Examples
 * Demonstrates usage in AI agent frameworks and cloud applications
 */

import { DocLayerClient, DocLayerUtils, SlideData } from '../typescript-wrapper/src';

// Example 1: Basic usage
async function basicExample(): Promise<Uint8Array> {
  console.log("Creating basic presentation...");
  
  const client = new DocLayerClient();
  
  const slides: SlideData[] = [
    {
      title: "AI Agent Report",
      content: "Generated automatically by AI Agent\n\n• Data analysis complete\n• Recommendations ready\n• Next steps identified",
      footnote: "Generated by AI Framework",
      pageNumber: "1"
    }
  ];
  
  const pptxBytes = await client.createBasicPresentation(
    "AI-Generated Report", 
    slides
  );
  
  console.log(`Created presentation: ${pptxBytes.length} bytes`);
  return pptxBytes;
}

// Example 2: Advanced presentation with custom shapes
async function advancedExample(): Promise<Uint8Array> {
  console.log("Creating advanced presentation...");
  
  const client = new DocLayerClient();
  const builder = client.createPresentation({ format: '16:9' });
  
  // Slide 1: Title slide
  const slide1 = builder.addSlide();
  slide1.addTitle("AI-Generated Business Report")
        .addTextbox("Quarterly Analysis Q4 2024")
        .addFootnote("Generated by AI Agent Framework")
        .addPageNumber("1");
  
  // Slide 2: Dashboard with shapes
  const slide2 = builder.addSlide();
  slide2.addTitle("Key Metrics Dashboard")
        .addRectangle(1, 2, 3, 2)  // Revenue box
        .addPositionedTextbox("Revenue\n$2.5M (+15%)", 1, 1, 3, 1)
        .addRectangle(5, 2, 3, 2)  // Users box 
        .addPositionedTextbox("Users\n125K (+8%)", 5, 1, 3, 1)
        .addShape({ type: 'arrow', x: 4, y: 3, width: 1, height: 0.5 })
        .addFootnote("Data as of Dec 2024")
        .addPageNumber("2");
  
  // Slide 3: Data table
  const slide3 = builder.addSlide();
  slide3.addTitle("Detailed Analysis")
        .addTable(5, 4)  // 5 rows, 4 columns
        .addFootnote("Source: Internal Analytics") 
        .addPageNumber("3");
  
  const pptxBytes = await builder.build();
  console.log(`Created advanced presentation: ${pptxBytes.length} bytes`);
  
  return pptxBytes;
}

// Example 3: AI Agent Integration
interface AnalysisData {
  title: string;
  date: string;
  aiModel: string;
  summary: string;
  metrics: Record<string, string>;
  recommendations: string[];
}

class ReportGenerator {
  private client: DocLayerClient;
  
  constructor() {
    this.client = new DocLayerClient();
  }
  
  async generateReport(analysisData: AnalysisData): Promise<Uint8Array> {
    const builder = this.client.createPresentation({ format: '16:9' });
    
    // Title slide
    const titleSlide = builder.addSlide();
    titleSlide.addTitle(analysisData.title)
             .addTextbox(`Generated on ${analysisData.date}`)
             .addFootnote(`Powered by ${analysisData.aiModel}`);
    
    // Summary slide
    if (analysisData.summary) {
      const summarySlide = builder.addSlide();
      summarySlide.addTitle("Executive Summary")
                  .addTextbox(analysisData.summary);
    }
    
    // Metrics slide with visual display
    if (analysisData.metrics) {
      const metricsSlide = builder.addSlide();
      metricsSlide.addTitle("Key Metrics");
      
      const entries = Object.entries(analysisData.metrics);
      entries.forEach(([key, value], index) => {
        const x = 1 + (index % 3) * 3;
        const y = 2 + Math.floor(index / 3) * 2;
        
        metricsSlide.addCircle(x, y, 2, 1)
                   .addPositionedTextbox(`${key}\n${value}`, x, y - 0.5, 2, 0.5);
      });
    }
    
    // Recommendations slide
    if (analysisData.recommendations.length > 0) {
      const recSlide = builder.addSlide();
      const recText = analysisData.recommendations
        .map(rec => `• ${rec}`)
        .join('\n');
      
      recSlide.addTitle("Recommendations")
              .addTextbox(recText);
    }
    
    return await builder.build();
  }
}

async function aiAgentIntegrationExample(): Promise<Uint8Array> {
  const generator = new ReportGenerator();
  
  // Simulated AI analysis data
  const aiData: AnalysisData = {
    title: 'Market Analysis Report',
    date: '2024-12-01',
    aiModel: 'GPT-4 + DocLayer',
    summary: 'Market shows strong growth potential with key opportunities in mobile and cloud segments.',
    metrics: {
      'Market Size': '$1.2B',
      'Growth Rate': '+23%',
      'Competitors': '15',
      'Market Share': '12%'
    },
    recommendations: [
      'Increase investment in mobile development',
      'Expand cloud infrastructure', 
      'Launch targeted marketing campaign',
      'Partner with key industry players'
    ]
  };
  
  const reportBytes = await generator.generateReport(aiData);
  console.log(`Generated AI agent report: ${reportBytes.length} bytes`);
  
  return reportBytes;
}

// Example 4: Utility functions for common patterns
async function utilityExample(): Promise<Uint8Array> {
  console.log("Using utility functions...");
  
  const client = new DocLayerClient();
  
  // Create dashboard
  const metrics = [
    { label: 'Revenue', value: '$2.5M', trend: 'up' as const },
    { label: 'Users', value: '125K', trend: 'up' as const },
    { label: 'Conversion', value: '5.8%', trend: 'stable' as const },
    { label: 'Satisfaction', value: '9.2/10', trend: 'up' as const }
  ];
  
  const dashboardBytes = await DocLayerUtils.createDashboard(
    client,
    "Q4 2024 Dashboard", 
    metrics
  );
  
  console.log(`Created dashboard: ${dashboardBytes.length} bytes`);
  return dashboardBytes;
}

// Example 5: Process flow presentation
async function processFlowExample(): Promise<Uint8Array> {
  console.log("Creating process flow...");
  
  const client = new DocLayerClient();
  
  const steps = [
    "Data Collection",
    "AI Analysis", 
    "Insight Generation",
    "Report Creation",
    "Stakeholder Review"
  ];
  
  const processBytes = await DocLayerUtils.createProcessFlow(
    client,
    "AI Report Generation Process",
    steps
  );
  
  console.log(`Created process flow: ${processBytes.length} bytes`);
  return processBytes;
}

// Example 6: Integration with popular AI frameworks
class LangChainIntegration {
  private docLayer: DocLayerClient;
  
  constructor() {
    this.docLayer = new DocLayerClient();
  }
  
  // Example LangChain tool
  async createPresentationTool(input: {
    title: string;
    content: string[];
    includeCharts: boolean;
  }): Promise<Uint8Array> {
    const builder = this.docLayer.createPresentation();
    
    // Title slide
    const titleSlide = builder.addSlide();
    titleSlide.addTitle(input.title)
             .addFootnote("Generated by LangChain + DocLayer");
    
    // Content slides
    input.content.forEach((content, index) => {
      const slide = builder.addSlide();
      slide.addTitle(`Section ${index + 1}`)
           .addTextbox(content)
           .addPageNumber((index + 2).toString());
      
      if (input.includeCharts) {
        slide.addTable(3, 3); // Add placeholder table/chart
      }
    });
    
    return await builder.build();
  }
}

class CrewAIIntegration {
  private docLayer: DocLayerClient;
  
  constructor() {
    this.docLayer = new DocLayerClient();
  }
  
  // Example CrewAI agent task
  async generateAnalysisReport(taskResult: any): Promise<Uint8Array> {
    const slides: SlideData[] = [
      {
        title: "Analysis Results",
        content: taskResult.summary || "Analysis completed by AI crew",
        footnote: "Generated by CrewAI + DocLayer",
        pageNumber: "1"
      }
    ];
    
    if (taskResult.data) {
      slides.push({
        title: "Data Insights",
        table: {
          rows: taskResult.data.length,
          cols: taskResult.data[0]?.length || 2,
          data: taskResult.data
        },
        pageNumber: "2"
      });
    }
    
    return await this.docLayer.createBasicPresentation(
      "CrewAI Analysis Report",
      slides
    );
  }
}

// Main execution
async function runAllExamples(): Promise<void> {
  console.log("DocLayer TypeScript Examples");
  console.log("=" + "=".repeat(39));
  
  try {
    await basicExample();
    console.log();
    
    await advancedExample();
    console.log();
    
    await aiAgentIntegrationExample();
    console.log();
    
    await utilityExample();
    console.log();
    
    await processFlowExample();
    console.log();
    
    console.log("All examples completed successfully!");
    console.log("\nUsage in AI frameworks:");
    console.log("- LangChain: Use as custom tool for document generation");
    console.log("- OpenAI Functions: Integrate as function call for PPT creation");
    console.log("- Vercel AI SDK: Add as tool in AI chat applications");
    console.log("- Node.js APIs: Deploy as serverless document service");
    console.log("- React/Next.js: Use in web applications for report generation");
    
  } catch (error) {
    console.error("Error running examples:", error);
  }
}

// Export for module usage
export {
  basicExample,
  advancedExample,
  aiAgentIntegrationExample,
  ReportGenerator,
  LangChainIntegration,
  CrewAIIntegration
};

// Run if called directly
if (require.main === module) {
  runAllExamples();
}