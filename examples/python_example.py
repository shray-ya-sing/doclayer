"""
DocLayer Python Examples
Demonstrates usage in AI agent frameworks and cloud applications
"""

import os
import tempfile
from doclayer_python import DocLayerClient, create_basic_presentation, create_data_presentation

def example_basic_usage():
    """Basic presentation creation example"""
    print("Creating basic presentation...")
    
    # Create a simple presentation
    with tempfile.NamedTemporaryFile(suffix='.pptx', delete=False) as tmp:
        pptx_bytes = create_basic_presentation(
            filepath=tmp.name,
            title="AI Agent Report",
            content="Generated automatically by AI Agent\n\n• Data analysis complete\n• Recommendations ready\n• Next steps identified"
        )
    
    print(f"Created presentation: {tmp.name}")
    print(f"Size: {len(pptx_bytes)} bytes")
    
    return pptx_bytes

def example_advanced_usage():
    """Advanced presentation with custom shapes"""
    print("Creating advanced presentation...")
    
    builder = DocLayerClient()
    
    with tempfile.NamedTemporaryFile(suffix='.pptx', delete=False) as tmp:
        with builder.create_presentation(tmp.name) as pres:
            pres.set_widescreen()
            
            # Slide 1: Title slide
            slide1 = pres.add_slide()
            slide1.add_title("AI-Generated Business Report")
            slide1.add_textbox("Quarterly Analysis Q4 2024")
            slide1.add_footnote("Generated by AI Agent Framework")
            slide1.add_page_number("1")
            
            # Slide 2: Dashboard with shapes
            slide2 = pres.add_slide()
            slide2.add_title("Key Metrics Dashboard")
            
            # Add metric boxes using shape tree
            shapes = slide2.get_shape_tree()
            shapes.add_rectangle(1, 2, 2, 3)  # Revenue box
            shapes.add_textbox("Revenue\n$2.5M (+15%)", 1, 1)
            
            shapes.add_rectangle(5, 2, 2, 3)  # Users box
            shapes.add_textbox("Users\n125K (+8%)", 5, 1)
            
            shapes.add_right_arrow(3, 3, 1, 2)  # Arrow between metrics
            
            slide2.add_footnote("Data as of Dec 2024")
            slide2.add_page_number("2")
            
            # Slide 3: Data table
            slide3 = pres.add_slide()
            slide3.add_title("Detailed Analysis")
            slide3.add_table(5, 4)  # 5 rows, 4 columns
            slide3.add_footnote("Source: Internal Analytics")
            slide3.add_page_number("3")
    
    # Read the created file
    with open(tmp.name, 'rb') as f:
        pptx_bytes = f.read()
    
    print(f"Created advanced presentation: {tmp.name}")
    print(f"Size: {len(pptx_bytes)} bytes")
    
    return pptx_bytes

def example_ai_agent_integration():
    """Example of integration with AI agent frameworks like LangChain, CrewAI"""
    
    class ReportGenerator:
        def __init__(self):
            self.doc_client = DocLayerClient()
        
        def generate_report(self, analysis_data: dict) -> bytes:
            """Generate PowerPoint report from AI analysis data"""
            
            with tempfile.NamedTemporaryFile(suffix='.pptx', delete=False) as tmp:
                with self.doc_client.create_presentation(tmp.name) as pres:
                    pres.set_widescreen()
                    
                    # Title slide
                    title_slide = pres.add_slide()
                    title_slide.add_title(analysis_data.get('title', 'AI Analysis Report'))
                    title_slide.add_textbox(f"Generated on {analysis_data.get('date', 'today')}")
                    title_slide.add_footnote(f"Powered by {analysis_data.get('ai_model', 'AI Agent')}")
                    
                    # Summary slide
                    if 'summary' in analysis_data:
                        summary_slide = pres.add_slide()
                        summary_slide.add_title("Executive Summary")
                        summary_slide.add_textbox(analysis_data['summary'])
                        
                    # Data slides
                    if 'metrics' in analysis_data:
                        metrics_slide = pres.add_slide()
                        metrics_slide.add_title("Key Metrics")
                        
                        # Create visual metrics display
                        shapes = metrics_slide.get_shape_tree()
                        for i, (key, value) in enumerate(analysis_data['metrics'].items()):
                            x = 1 + (i % 3) * 3
                            y = 2 + (i // 3) * 2
                            shapes.add_circle(x, y, 1, 2)
                            shapes.add_textbox(f"{key}\n{value}", x, y - 0.5)
                    
                    # Recommendations slide
                    if 'recommendations' in analysis_data:
                        rec_slide = pres.add_slide()
                        rec_slide.add_title("Recommendations")
                        rec_text = "\n".join([f"• {rec}" for rec in analysis_data['recommendations']])
                        rec_slide.add_textbox(rec_text)
            
            # Return bytes for cloud storage/transmission
            with open(tmp.name, 'rb') as f:
                return f.read()
    
    # Example usage
    generator = ReportGenerator()
    
    # Simulated AI analysis data
    ai_data = {
        'title': 'Market Analysis Report',
        'date': '2024-12-01',
        'ai_model': 'GPT-4 + DocLayer',
        'summary': 'Market shows strong growth potential with key opportunities in mobile and cloud segments.',
        'metrics': {
            'Market Size': '$1.2B',
            'Growth Rate': '+23%',
            'Competitors': '15',
            'Market Share': '12%'
        },
        'recommendations': [
            'Increase investment in mobile development',
            'Expand cloud infrastructure',
            'Launch targeted marketing campaign',
            'Partner with key industry players'
        ]
    }
    
    report_bytes = generator.generate_report(ai_data)
    print(f"Generated AI agent report: {len(report_bytes)} bytes")
    
    return report_bytes

def example_data_table_presentation():
    """Create presentation with data tables (common in AI/analytics)"""
    
    # Sample data that might come from AI analysis
    table_data = [
        ['Metric', 'Q1', 'Q2', 'Q3', 'Q4'],
        ['Revenue', '$500K', '$750K', '$1.2M', '$2.5M'],
        ['Users', '25K', '45K', '78K', '125K'],
        ['Conversion', '2.3%', '3.1%', '4.2%', '5.8%'],
        ['Satisfaction', '7.2', '8.1', '8.7', '9.2']
    ]
    
    with tempfile.NamedTemporaryFile(suffix='.pptx', delete=False) as tmp:
        pptx_bytes = create_data_presentation(
            filepath=tmp.name,
            title="Quarterly Performance Analysis",
            data=table_data
        )
    
    print(f"Created data presentation: {tmp.name}")
    return pptx_bytes

if __name__ == "__main__":
    print("DocLayer Python Examples")
    print("=" * 40)
    
    # Run examples
    example_basic_usage()
    print()
    
    example_advanced_usage() 
    print()
    
    example_ai_agent_integration()
    print()
    
    example_data_table_presentation()
    print()
    
    print("All examples completed successfully!")
    print("\nUsage in AI frameworks:")
    print("- LangChain: Use in custom tools for document generation")
    print("- CrewAI: Integrate in agent tasks for report creation") 
    print("- AutoGPT: Add as a skill for PowerPoint generation")
    print("- Cloud functions: Deploy as serverless document service")